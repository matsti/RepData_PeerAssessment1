library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
str(airquality)
airquality = transform(airquality, Month = factor(Month))
str(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
g
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies) + geom_smooth()
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
x
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
y
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x = x, y = y)
dist(dataFrame)
hClustering <- hclust(distxy)
distxy <- dist(dataFrame)
hClustering <- hclust(distxy)
hClustering
plot(hClustering)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x, y)
kmeansObj <- kmeans(dataFrame, centers = 3)
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
kmeansObj <- kmeans(dataFrame, centers = 4)
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
kmeansObj <- kmeans(dataFrame, centers = 4)
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:4, pch = 3, cex = 3, lwd = 3)
set.seed(12345)
dataMatrix <- matrix(rnorm(400), nrow = 40)
dataMatrix
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
nrow(dataMatrix)
nrow(dataMatrix):1
image(1:10, 1:40, t(dataMatrix))
t(dataMatrix)
?t
image(1:10, 1:40, dataMatrix)
image(1:40, 1:10, dataMatrix)
dataMatrix
?image
image(1:40, 1:10, dataMatrix, col = terrain.colors(100))
?image
heatmap(dataMatrix)
?heatmap
rep(c(0, 3), each = 5)
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:40, 1:10, dataMatrix)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if (coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5)
}
}
image(1:40, 1:10, dataMatrix)
heatmap(dataMatrix)
dist(dataMatrix)
hclust(dist(dataMatrix))
hh$order
hclust(dist(dataMatrix))$$order
hclust(dist(dataMatrix))$order
111.222%/%100
111.222%/%10
111.222%/%1
12345.67809%/%100
12345.67809%/%10
12345.67809%/%1
12345.67809%%1
12345.67809%%10
12345.67809%%100
12345%%100
12345%/%100
temp <- c(5, 15, 55, 100, 105, 120, 185)
class(temp)
temp%/%100 * 60 + temp%%100
temp <- c(5, 15, 55, 100, 105, 120, 155, 200)
class(temp)
temp
temp%/%100 * 60 + temp%%100
cold.states$Name
#http://r.789695.n4.nabble.com/Bulk-Match-Replace-td1311133.html
setwd("~/Coursera/R/4_ReproducibleResearch/gitsync/RepData_PeerAssessment1/PA1_template_files")
ls()
dir()
setwd("~/Coursera/R/4_ReproducibleResearch/gitsync/RepData_PeerAssessment1")
dir()
unzip("activity.zip", overwrite = TRUE)
stepsdate <- read.csv("activity.csv")
str(stepsdate)
library(lubridate)
stepsdate$date <- ymd(stepsdate$date)
str(stepsdate)
tmp <- sprintf("%02d:%02d", stepsdate$interval%/%100, stepsdate$interval%%100)
stepsdate$timeperiod <- hm(tmp)
str(stepsdate)
library(plyr)
ddply(stepsdate, "date", summarize,
meanstepcount = sum(steps, na.rm = TRUE),
maxstep = max(steps[steps>0], na.rm = TRUE),
stepmean = round(mean(steps, na.rm = TRUE), 1),
stepmedian = median(steps[steps>0], na.rm = TRUE))
stepsday <- ddply(stepsdate, "date", summarize,
meanstepcount = sum(steps, na.rm = TRUE))
meansteps = round(mean(stepsday$meanstepcount), 1)
mediansteps = median(stepsday$meanstepcount)
hist(stepsday$meanstepcount,
main = "Total number of steps taken each day",
xlab = "Total number of steps",
ylab = "Frequency",
col = "grey90")
abline(v=meansteps,col="red")
abline(v=mediansteps,col="green")
legend("topright",
c("total number of steps",
paste("mean ",meansteps),
paste("median",mediansteps)),
col = c("black", "red", "green"),
lty = c(0, 1, 1),
lwd = c(0, 1, 1),
pch = c(22, NA, NA),
pt.bg = c("grey90", NA, NA),
pt.cex = c(3, NA, NA),
pt.lw = c(1.1, NA, NA),
bty="n")
stepsdate$dailyinterval <- stepsdate$date[1] + stepsdate$timeperiod
stepsday <- ddply(stepsdate, "dailyinterval", summarize,
stepaverage = mean(steps, na.rm = TRUE))
str(stepsday)
plot(stepsday$dailyinterval,
stepsday$stepaverage,
type="l",
main = "Average number of steps taken in each 5 minute interval")
maxsteptime <- stepsday$dailyinterval[max(stepsday$stepaverage, na.rm = TRUE)
== stepsday$stepaverage]
maxsteptime <- strftime(maxsteptime, format="%H:%M")
repairindex <- is.na(stepsdate$steps)
length(repairindex)
length(is.na(repairindex))
repairindex[1:50]
repairindex[201:250]
length(is.na(stepsdate$steps))
length(!is.na(stepsdate$steps))
str(stepsdate$steps)
stepsdate$steps[1:500]
is.na(stepsdate$steps)[1:500]
repairindex <- is.na(stepsdate$steps)
repairindex[1:500]
stepsdate[repairindex]$steps[1:500]
stepsdate[repairindex]$steps
stepsdate$steps[repairindex]
stepsdate$dailyinterval[repairindex]
stepsdate$steps[repairindex]
stepsdate$dailyinterval[repairindex]
stepsday$dailyinterval
match(stepsdate$dailyinterval[repairindex], stepsday$dailyinterval)
stepsday$meanstepcount[match(stepsdate$dailyinterval[repairindex], stepsday$dailyinterval)]
stepsday$stepaverage[match(stepsdate$dailyinterval[repairindex], stepsday$dailyinterval)]
